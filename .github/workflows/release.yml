name: Create Release

permissions:
  contents: write
  packages: write
  issues: write

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'v*'

jobs:
  version-and-release:
    name: Version and Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          extensions: mbstring, xml
          tools: composer:v2

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(grep -Po "Version: \K[0-9]+\.[0-9]+\.[0-9]+" newcustomer-discount.php)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Aktuelle Version: $CURRENT_VERSION"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT=${{ steps.current_version.outputs.CURRENT_VERSION }}
          # Versionsteile extrahieren
          MAJOR=$(echo $CURRENT | cut -d. -f1)
          MINOR=$(echo $CURRENT | cut -d. -f2)
          PATCH=$(echo $CURRENT | cut -d. -f3)
          
          # Commit Message analysieren für Versionstyp
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ $COMMIT_MSG == *"MAJOR:"* ]]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [[ $COMMIT_MSG == *"MINOR:"* ]]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
          else
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          fi
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Neue Version: $NEW_VERSION"

      - name: Update version in files
        run: |
          VERSION=${{ steps.new_version.outputs.NEW_VERSION }}
          echo "Aktualisiere Version auf: $VERSION"
          
          # Update Plugin-Datei
          sed -i "s/Version: .*$/Version: $VERSION/" newcustomer-discount.php
          sed -i "s/define('NCD_VERSION',.*/define('NCD_VERSION', '$VERSION');/" newcustomer-discount.php
          
          # Update readme.txt falls vorhanden
          if [ -f "readme.txt" ]; then
            sed -i "s/Stable tag: .*$/Stable tag: $VERSION/" readme.txt
          fi

      - name: PHP Lint
        run: |
          find . -name "*.php" -exec php -l {} \;

      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"* %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges)
          fi
          
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create ZIP archive
        run: |
          mkdir -p temp/newcustomer-discount
          rsync -av --exclude='.git*' --exclude='.github' --exclude='temp' --exclude='tests' --exclude='node_modules' . temp/newcustomer-discount/
          cd temp
          zip -r ../newcustomer-discount-wp-plugin.zip newcustomer-discount
          cd ..
          rm -rf temp

      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "chore: update version to ${{ steps.new_version.outputs.NEW_VERSION }}"
          git tag "v${{ steps.new_version.outputs.NEW_VERSION }}"
          git push
          git push --tags

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: newcustomer-discount-wp-plugin.zip
          tag_name: v${{ steps.new_version.outputs.NEW_VERSION }}
          name: Release ${{ steps.new_version.outputs.NEW_VERSION }}
          body: |
            Änderungen in diesem Release:
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ### Automatisch generierter Release
            
            Diese Version enthält:
            * Plugin Version: ${{ steps.new_version.outputs.NEW_VERSION }}
            * Generiert am: ${{ steps.version.outputs.DATE }}
            
            ### Installation
            1. Laden Sie die ZIP-Datei herunter
            2. Gehen Sie in Ihrem WordPress-Dashboard zu Plugins > Installieren
            3. Klicken Sie auf "Plugin hochladen"
            4. Wählen Sie die heruntergeladene ZIP-Datei aus
            5. Klicken Sie auf "Jetzt installieren"
            6. Aktivieren Sie das Plugin

      - name: Cleanup
        if: always()
        run: |
          rm -f newcustomer-discount-wp-plugin.zip